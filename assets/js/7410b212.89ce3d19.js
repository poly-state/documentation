"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[365],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return h}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),d=c(n),h=o,f=d["".concat(p,".").concat(h)]||d[h]||u[h]||a;return n?r.createElement(f,s(s({ref:t},l),{},{components:n})):r.createElement(f,s({ref:t},l))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var c=2;c<a;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},605:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return p},metadata:function(){return c},toc:function(){return l},default:function(){return d}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),s=["components"],i={id:"nextjs-ssr",title:"Next.js with SSR",slug:"/nextjs-ssr",sidebar_label:"Next.js with SSR"},p=void 0,c={unversionedId:"nextjs-ssr",id:"nextjs-ssr",title:"Next.js with SSR",description:"Accessing your store instances on your server",source:"@site/docs/04-nextjs.md",sourceDirName:".",slug:"/nextjs-ssr",permalink:"/docs/nextjs-ssr",tags:[],version:"current",sidebarPosition:4,frontMatter:{id:"nextjs-ssr",title:"Next.js with SSR",slug:"/nextjs-ssr",sidebar_label:"Next.js with SSR"},sidebar:"defaultSidebar",previous:{title:"Redux DevTools",permalink:"/docs/redux-devtools"},next:{title:"Preact",permalink:"/docs/preact"}},l=[{value:"Accessing your store instances on your server",id:"accessing-your-store-instances-on-your-server",children:[],level:3}],u={toc:l};function d(e){var t=e.components,n=(0,o.Z)(e,s);return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"accessing-your-store-instances-on-your-server"},"Accessing your store instances on your server"),(0,a.kt)("p",null,"It is safe to use store's functionality on your Server side code such as GetInitialProps on a page. However, once the app has rendered on the browser the store will be re created and the state will be lost.\nTo deal with this, poly-state comes with a special ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"hydrate"))," method which is designed to be able to set the store's data on the client side by taking the data from server side. Since it you only need to do this once before the app is rendered on the client side, it's the perfect choice for reducing boilerplate code on server side authentication and preventing flash of unauthenticated content."),(0,a.kt)("p",null,"To get started, create an ","_","app.tsx file in your pages folder and add the following content:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import App, { AppContext, AppProps } from 'next/app';\nimport Head from 'next/head';\nimport { parseCookies } from 'nookies';\nimport { authStore, AuthStoreType, useAuthStore } from '../stores';\n\ntype ExtendedAppProps = AppProps & { authStore: AuthStoreType };\n\nfunction CustomApp({\n    Component,\n    pageProps,\n    authStore: authStoreHydrateValue,\n}: ExtendedAppProps) {\n    authStore.hydrate(authStoreHydrateValue); // receive the serialized state from server side to client side, since it fires synchroneously all of your pages and apps will have the latest state\n    const { isLoggedIn } = useAuthStore(); // true if the user is logged in\n    return (\n        <div className='app'>\n            {isLoggedIn && <Header />}\n            <Component {...pageProps} />\n        </div>\n    );\n}\n\nCustomApp.getInitialProps = async (appContext: AppContext) => {\n    const cookies = parseCookies(appContext.ctx);\n\n    if (cookies?.token && cookies?.token !== '') {\n        authStore.setBatch((state) => {\n            return { ...state, isLoggedIn: true, token: cookies.token };\n        });\n    }\n\n    const appProps = await App.getInitialProps(appContext);\n\n    return { ...appProps, authStore: authStore.getState() };\n};\n\nexport default CustomApp;\n")),(0,a.kt)("p",null,"That's all, now you can access/update authStore from any of the page's getInitialProps without any issues and your client side will always have the latest state before rendering."),(0,a.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"While we do not limit the use of unserializable data in the store, it is highly recommended to use only serializable data.\nIn next.js the props are serialized before they are sent to the App component, so anything that is not JSON.stringifyable will be lost."))))}d.isMDXComponent=!0}}]);